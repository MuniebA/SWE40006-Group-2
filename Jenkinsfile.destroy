pipeline {
    agent any
    
    parameters {
        booleanParam(name: 'CONFIRM_DESTROY', defaultValue: false, description: 'Check this box to confirm you want to destroy all AWS resources')
    }

    environment {
        TERRAFORM_VERSION = "1.12.0"
        AWS_CREDENTIALS = credentials('aws-credentials')
    }

    stages {
        stage('Verify Parameters') {
            steps {
                script {
                    if (!params.CONFIRM_DESTROY) {
                        error("Destruction canceled. You must check the confirmation box to proceed.")
                    } else {
                        echo "Destruction confirmed via parameter. Proceeding..."
                    }
                }
            }
        }
        
        stage('Confirm Destruction') {
            steps {
                input message: 'WARNING: This will DESTROY all AWS resources. Are you absolutely sure?', ok: 'Yes, destroy everything'
            }
        }
        
        stage('Install Terraform') {
            steps {
                sh '''#!/bin/bash
                    # Install Terraform without requiring unzip
                    echo "Installing Terraform ${TERRAFORM_VERSION}..."
                    mkdir -p ${WORKSPACE}/terraform
                    cd ${WORKSPACE}/terraform
                    
                    # Use Python to download and extract Terraform
                    python3 -c '
import urllib.request
import zipfile
import os

version = os.environ.get("TERRAFORM_VERSION", "1.12.0")
url = f"https://releases.hashicorp.com/terraform/{version}/terraform_{version}_linux_amd64.zip"
zip_path = "terraform.zip"

print(f"Downloading Terraform {version}...")
urllib.request.urlretrieve(url, zip_path)

print("Extracting Terraform binary...")
with zipfile.ZipFile(zip_path, "r") as zip_ref:
    zip_ref.extractall(".")

os.chmod("terraform", 0o755)
print("Terraform installed successfully!")
'
                    
                    # Add to PATH for this session
                    export PATH=${WORKSPACE}/terraform:$PATH
                    
                    # Verify installation
                    ./terraform version
                '''
            }
        }
        
        stage('Destroy AWS Resources') {
            steps {
                sh '''#!/bin/bash
                    # Set AWS credentials
                    export AWS_ACCESS_KEY_ID=$AWS_CREDENTIALS_USR
                    export AWS_SECRET_ACCESS_KEY=$AWS_CREDENTIALS_PSW
                    export AWS_DEFAULT_REGION=ap-southeast-1
                    
                    # Use local Terraform installation
                    export PATH=${WORKSPACE}/terraform:$PATH
                    
                    # Initialize Terraform
                    terraform init
                    
                    # Destroy all resources
                    echo "Destroying all AWS resources..."
                    terraform destroy -auto-approve
                    
                    echo "===================================================="
                    echo "            AWS RESOURCES DESTROYED                  "
                    echo "===================================================="
                '''
            }
        }

        stage('Emergency AWS Resource Cleanup') {
            steps {
                sh '''#!/bin/bash
                    # Set AWS credentials
                    export AWS_ACCESS_KEY_ID=$AWS_CREDENTIALS_USR
                    export AWS_SECRET_ACCESS_KEY=$AWS_CREDENTIALS_PSW
                    export AWS_DEFAULT_REGION=ap-southeast-1
                    
                    # Install AWS CLI using pip (more reliable in Jenkins)
                    echo "Installing AWS CLI using pip..."
                    python3 -m pip install --user awscli
                    export PATH=$HOME/.local/bin:$PATH
                    
                    # Verify AWS CLI installation
                    aws --version
                    
                    # Find the EC2 instance
                    echo "Looking for EC2 instances with tag Name=tf-docker-web"
                    INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=tf-docker-web" --query "Reservations[].Instances[].InstanceId" --output text)
                    
                    if [ -n "$INSTANCE_ID" ]; then
                        echo "Found instance: $INSTANCE_ID"
                        
                        # Terminate the instance
                        echo "Terminating instance..."
                        aws ec2 terminate-instances --instance-ids $INSTANCE_ID
                        
                        echo "Instance termination initiated!"
                    else
                        echo "No matching instance found with tag Name=tf-docker-web"
                        
                        # Try finding by IP address
                        echo "Trying to find instance by public IP address (18.141.184.166)..."
                        INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=public-ip-address,Values=18.141.184.166" --query "Reservations[].Instances[].InstanceId" --output text)
                        
                        if [ -n "$INSTANCE_ID" ]; then
                            echo "Found instance by IP: $INSTANCE_ID"
                            echo "Terminating instance..."
                            aws ec2 terminate-instances --instance-ids $INSTANCE_ID
                            echo "Instance termination initiated!"
                        else
                            echo "No instance found with IP 18.141.184.166"
                            
                            # List all running instances as a last resort
                            echo "Listing all running instances for manual verification:"
                            aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].[InstanceId,PublicIpAddress,Tags[?Key=='Name'].Value|[0]]" --output table
                        fi
                    fi
                    
                    # Clean up security groups (will attempt this even if instance wasn't found)
                    echo "Cleaning up security groups..."
                    SG_ID=$(aws ec2 describe-security-groups --filters "Name=tag:Name,Values=docker-web-sg" --query "SecurityGroups[].GroupId" --output text)
                    if [ -n "$SG_ID" ]; then
                        echo "Found security group: $SG_ID"
                        echo "Note: Security group will be deleted after instance termination is complete"
                        # We don't try to delete it now as it might still be attached to the terminating instance
                    fi
                    
                    echo "====================================================="
                    echo "         EMERGENCY CLEANUP INITIATED                 "
                    echo "====================================================="
                '''
            }
        }
        
    }
    
    
    post {
        success {
            echo 'AWS resources destroyed successfully!'
        }
        
        failure {
            echo 'Failed to destroy AWS resources. Check the logs for details.'
        }
    }
}