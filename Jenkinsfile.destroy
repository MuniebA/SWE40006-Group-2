pipeline {
    agent any
    
    parameters {
        booleanParam(name: 'CONFIRM_DESTROY', defaultValue: false, description: 'Check this box to confirm you want to destroy all AWS resources')
    }

    environment {
        TERRAFORM_VERSION = "1.12.0"
        AWS_CREDENTIALS = credentials('aws-credentials')
    }

    stages {
        stage('Verify Parameters') {
            steps {
                script {
                    if (!params.CONFIRM_DESTROY) {
                        error("Destruction canceled. You must check the confirmation box to proceed.")
                    } else {
                        echo "Destruction confirmed via parameter. Proceeding..."
                    }
                }
            }
        }
        
        stage('Confirm Destruction') {
            steps {
                input message: 'WARNING: This will DESTROY all AWS resources. Are you absolutely sure?', ok: 'Yes, destroy everything'
            }
        }
        
        stage('Install Terraform') {
            steps {
                sh '''#!/bin/bash
                    # Install Terraform without requiring unzip
                    echo "Installing Terraform ${TERRAFORM_VERSION}..."
                    mkdir -p ${WORKSPACE}/terraform
                    cd ${WORKSPACE}/terraform
                    
                    # Use Python to download and extract Terraform
                    python3 -c '
import urllib.request
import zipfile
import os

version = os.environ.get("TERRAFORM_VERSION", "1.12.0")
url = f"https://releases.hashicorp.com/terraform/{version}/terraform_{version}_linux_amd64.zip"
zip_path = "terraform.zip"

print(f"Downloading Terraform {version}...")
urllib.request.urlretrieve(url, zip_path)

print("Extracting Terraform binary...")
with zipfile.ZipFile(zip_path, "r") as zip_ref:
    zip_ref.extractall(".")

os.chmod("terraform", 0o755)
print("Terraform installed successfully!")
'
                    
                    # Add to PATH for this session
                    export PATH=${WORKSPACE}/terraform:$PATH
                    
                    # Verify installation
                    ./terraform version
                '''
            }
        }
        
        stage('Destroy AWS Resources') {
            steps {
                sh '''#!/bin/bash
                    # Set AWS credentials
                    export AWS_ACCESS_KEY_ID=$AWS_CREDENTIALS_USR
                    export AWS_SECRET_ACCESS_KEY=$AWS_CREDENTIALS_PSW
                    export AWS_DEFAULT_REGION=ap-southeast-1
                    
                    # Use local Terraform installation
                    export PATH=${WORKSPACE}/terraform:$PATH
                    
                    # Initialize Terraform
                    terraform init
                    
                    # Destroy all resources
                    echo "Destroying all AWS resources..."
                    terraform destroy -auto-approve
                    
                    echo "===================================================="
                    echo "            AWS RESOURCES DESTROYED                  "
                    echo "===================================================="
                '''
            }
        }
    }
    
    post {
        success {
            echo 'AWS resources destroyed successfully!'
        }
        
        failure {
            echo 'Failed to destroy AWS resources. Check the logs for details.'
        }
    }
}